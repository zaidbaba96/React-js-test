import { CellPosition, CellPositionUtils, Column, IRangeService, CellRangeParams, CellRange, RowPosition, RowPositionUtils, BeanStub, CtrlsService, AutoScrollService } from "@ag-grid-community/core";
export declare class RangeService extends BeanStub implements IRangeService {
    private rowModel;
    private columnModel;
    private mouseEventService;
    private columnApi;
    private gridApi;
    private cellNavigationService;
    private pinnedRowModel;
    rowPositionUtils: RowPositionUtils;
    cellPositionUtils: CellPositionUtils;
    ctrlsService: CtrlsService;
    private cellRanges;
    private lastMouseEvent;
    private bodyScrollListener;
    private newestRangeStartCell?;
    private dragging;
    private draggingCell?;
    private draggingRange?;
    autoScrollService: AutoScrollService;
    private init;
    onColumnVisibleChange(): void;
    refreshLastRangeStart(): void;
    isContiguousRange(cellRange: CellRange): boolean;
    getRangeStartRow(cellRange: CellRange): RowPosition;
    getRangeEndRow(cellRange: CellRange): RowPosition;
    setRangeToCell(cell: CellPosition, appendRange?: boolean): void;
    extendLatestRangeToCell(cellPosition: CellPosition): void;
    updateRangeEnd(cellRange: CellRange, cellPosition: CellPosition, silent?: boolean): void;
    private refreshRangeStart;
    getRangeEdgeColumns(cellRange: CellRange): {
        left: Column;
        right: Column;
    };
    extendLatestRangeInDirection(key: number): CellPosition | undefined;
    setCellRange(params: CellRangeParams): void;
    setCellRanges(cellRanges: CellRange[]): void;
    createCellRangeFromCellRangeParams(params: CellRangeParams): CellRange | undefined;
    addCellRange(params: CellRangeParams): void;
    getCellRanges(): CellRange[];
    isEmpty(): boolean;
    isMoreThanOneCell(): boolean;
    removeAllCellRanges(silent?: boolean): void;
    private onBodyScroll;
    isCellInAnyRange(cell: CellPosition): boolean;
    isCellInSpecificRange(cell: CellPosition, range: CellRange): boolean;
    private isLastCellOfRange;
    isBottomRightCell(cellRange: CellRange, cell: CellPosition): boolean;
    getCellRangeCount(cell: CellPosition): number;
    private isRowInRange;
    getDraggingRange(): CellRange | undefined;
    onDragStart(mouseEvent: MouseEvent): void;
    onDragging(mouseEvent: MouseEvent | null): void;
    onDragStop(): void;
    private dispatchChangedEvent;
    private calculateColumnsBetween;
}
