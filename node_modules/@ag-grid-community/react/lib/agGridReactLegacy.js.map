{"version":3,"sources":["agGridReactLegacy.ts"],"names":[],"mappings":"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","file":"agGridReactLegacy.js","sourcesContent":["import React, { Component, ReactPortal } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    _,\n    BaseComponentWrapper,\n    ColumnApi,\n    ComponentType,\n    ComponentUtil,\n    FrameworkComponentWrapper,\n    Grid,\n    GridApi,\n    GridOptions,\n    WrappableInterface\n} from '@ag-grid-community/core';\nimport { AgGridColumn } from './agGridColumn';\nimport { ChangeDetectionService, ChangeDetectionStrategyType } from './changeDetectionService';\nimport { ReactComponent } from './reactComponent';\nimport { LegacyReactComponent } from './legacyReactComponent';\nimport { NewReactComponent } from './newReactComponent';\nimport { AgGridReactProps } from './interfaces';\n\nexport class AgGridReactLegacy extends Component<AgGridReactProps, {}> {\n    private static MAX_COMPONENT_CREATION_TIME_IN_MS: number = 1000; // a second should be more than enough to instantiate a component\n\n    static propTypes: any;\n\n    static defaultProps = {\n        legacyComponentRendering: false,\n        disableStaticMarkup: false,\n        maxComponentCreationTimeMs: AgGridReactLegacy.MAX_COMPONENT_CREATION_TIME_IN_MS\n    };\n\n    gridOptions!: GridOptions;\n\n    changeDetectionService = new ChangeDetectionService();\n\n    api: GridApi | null = null;\n    columnApi!: ColumnApi;\n    portals: ReactPortal[] = [];\n    hasPendingPortalUpdate = false;\n\n    destroyed = false;\n\n    protected eGridDiv!: HTMLElement;\n\n    readonly SYNCHRONOUS_CHANGE_PROPERTIES = ['context']\n\n    constructor(public props: AgGridReactProps) {\n        super(props);\n    }\n\n    render() {\n        return React.createElement('div', {\n            style: this.createStyleForDiv(),\n            className: this.props.className,\n            ref: (e: HTMLElement) => {\n                this.eGridDiv = e;\n            }\n        }, this.portals);\n    }\n\n    createStyleForDiv() {\n        return {\n            height: '100%',\n            ...(this.props.containerStyle || {})\n        };\n    }\n\n    componentDidMount() {\n        const modules = this.props.modules || [];\n        const gridParams = {\n            providedBeanInstances: {\n                agGridReact: this,\n                frameworkComponentWrapper: new ReactFrameworkComponentWrapper(this)\n            },\n            modules\n        };\n\n        const gridOptions = this.props.gridOptions || {};\n        const {children} = this.props;\n\n        if (AgGridColumn.hasChildColumns(children)) {\n            gridOptions.columnDefs = AgGridColumn.mapChildColumnDefs(children);\n        }\n\n        this.gridOptions = ComponentUtil.copyAttributesToGridOptions(gridOptions, this.props);\n\n        // don't need the return value\n        new Grid(this.eGridDiv, this.gridOptions, gridParams);\n\n        this.api = this.gridOptions.api!;\n        this.columnApi = this.gridOptions.columnApi!;\n\n        this.props.setGridApi!(this.api, this.columnApi);\n    }\n\n    waitForInstance(reactComponent: ReactComponent, resolve: (value: any) => void, startTime = Date.now()): void {\n        // if the grid has been destroyed in the meantime just resolve\n        if (this.destroyed) {\n            resolve(null);\n            return;\n        }\n\n        if (reactComponent.rendered()) {\n            resolve(reactComponent);\n        } else {\n            if (Date.now() - startTime >= this.props.maxComponentCreationTimeMs! && !this.hasPendingPortalUpdate) {\n                // last check - we check if this is a null value being rendered - we do this last as using SSR to check the value\n                // can mess up contexts\n                if (reactComponent.isNullValue()) {\n                    resolve(reactComponent);\n                    return;\n                }\n\n                console.error(`AG Grid: React Component '${reactComponent.getReactComponentName()}' not created within ${AgGridReactLegacy.MAX_COMPONENT_CREATION_TIME_IN_MS}ms`);\n                return;\n            }\n\n            window.setTimeout(() => {\n                this.waitForInstance(reactComponent, resolve, startTime);\n            });\n        }\n    }\n\n    /**\n     * Mounts a react portal for components registered under the componentFramework.\n     * We do this because we want all portals to be in the same tree - in order to get\n     * Context to work properly.\n     */\n    mountReactPortal(portal: ReactPortal, reactComponent: ReactComponent, resolve: (value: any) => void) {\n        this.portals = [...this.portals, portal];\n        this.waitForInstance(reactComponent, resolve);\n        this.batchUpdate();\n    }\n\n    updateReactPortal(oldPortal: ReactPortal, newPortal: ReactPortal) {\n        this.portals[this.portals.indexOf(oldPortal)] = newPortal;\n        this.batchUpdate();\n    }\n\n    batchUpdate(): void {\n        if (this.hasPendingPortalUpdate) {\n            return;\n        }\n\n        setTimeout(() => {\n            if (this.api) { // destroyed?\n                this.forceUpdate(() => {\n                    this.hasPendingPortalUpdate = false;\n                });\n            }\n        });\n\n        this.hasPendingPortalUpdate = true;\n    }\n\n\n    destroyPortal(portal: ReactPortal) {\n        this.portals = this.portals.filter(curPortal => curPortal !== portal);\n        this.batchUpdate();\n    }\n\n    private getStrategyTypeForProp(propKey: string) {\n        if (propKey === 'rowData') {\n            if (this.props.rowDataChangeDetectionStrategy) {\n                return this.props.rowDataChangeDetectionStrategy;\n            } else if (this.isImmutableDataActive()) {\n                return ChangeDetectionStrategyType.IdentityCheck;\n            }\n        }\n\n        // all other cases will default to DeepValueCheck\n        return ChangeDetectionStrategyType.DeepValueCheck;\n    }\n\n    private isImmutableDataActive() {\n        return (this.props.deltaRowDataMode || this.props.immutableData) ||\n            (this.props.gridOptions && (this.props.gridOptions.deltaRowDataMode || this.props.gridOptions.immutableData));\n    }\n\n    shouldComponentUpdate(nextProps: any) {\n        this.processPropsChanges(this.props, nextProps);\n\n        // we want full control of the dom, as AG Grid doesn't use React internally,\n        // so for performance reasons we tell React we don't need render called after\n        // property changes.\n        return false;\n    }\n\n    componentDidUpdate(prevProps: any) {\n        this.processPropsChanges(prevProps, this.props);\n    }\n\n    processPropsChanges(prevProps: any, nextProps: any) {\n        const changes = {};\n\n        this.extractGridPropertyChanges(prevProps, nextProps, changes);\n        this.extractDeclarativeColDefChanges(nextProps, changes);\n\n        this.processSynchronousChanges(changes);\n        this.processAsynchronousChanges(changes);\n    }\n\n    private extractDeclarativeColDefChanges(nextProps: any, changes: any) {\n        // if columnDefs are provided on gridOptions we use those - you can't combine both\n        // we also skip if columnDefs are provided as a prop directly on AgGridReact\n        if ((this.props.gridOptions && this.props.gridOptions.columnDefs) || this.props.columnDefs) {\n            return;\n        }\n\n        const debugLogging = !!nextProps.debug;\n        const propKey = 'columnDefs';\n        const currentColDefs = this.gridOptions.columnDefs;\n\n        if (AgGridColumn.hasChildColumns(nextProps.children)) {\n            const detectionStrategy = this.changeDetectionService.getStrategy(this.getStrategyTypeForProp(propKey));\n            const newColDefs = AgGridColumn.mapChildColumnDefs(nextProps.children);\n\n            if (!detectionStrategy.areEqual(currentColDefs, newColDefs)) {\n                if (debugLogging) {\n                    console.log(`agGridReact: colDefs definitions changed`);\n                }\n\n                changes[propKey] =\n                    {\n                        previousValue: currentColDefs,\n                        currentValue: newColDefs\n                    };\n            }\n        } else if (currentColDefs && currentColDefs.length > 0) {\n            changes[propKey] =\n                {\n                    previousValue: currentColDefs,\n                    currentValue: []\n                };\n        }\n    }\n\n    private extractGridPropertyChanges(prevProps: any, nextProps: any, changes: any) {\n        const debugLogging = !!nextProps.debug;\n\n        Object.keys(nextProps).forEach(propKey => {\n            if (_.includes(ComponentUtil.ALL_PROPERTIES, propKey)) {\n                const changeDetectionStrategy = this.changeDetectionService.getStrategy(this.getStrategyTypeForProp(propKey));\n\n                if (!changeDetectionStrategy.areEqual(prevProps[propKey], nextProps[propKey])) {\n                    if (debugLogging) {\n                        console.log(`agGridReact: [${propKey}] property changed`);\n                    }\n\n                    changes[propKey] = {\n                        previousValue: prevProps[propKey],\n                        currentValue: nextProps[propKey]\n                    };\n                }\n            }\n        });\n\n        ComponentUtil.getEventCallbacks().forEach(funcName => {\n            const propsAny = this.props as any;\n            if (propsAny[funcName] !== nextProps[funcName]) {\n                if (debugLogging) {\n                    console.log(`agGridReact: [${funcName}] event callback changed`);\n                }\n\n                changes[funcName] = {\n                    previousValue: prevProps[funcName],\n                    currentValue: nextProps[funcName]\n                };\n            }\n        });\n    }\n\n    componentWillUnmount() {\n        if (this.api) {\n            this.api.destroy();\n            this.api = null;\n        }\n\n        this.destroyed = true;\n    }\n\n    public isDisableStaticMarkup(): boolean {\n        return this.props.disableStaticMarkup === true;\n    }\n\n    public isLegacyComponentRendering(): boolean {\n        return this.props.legacyComponentRendering === true;\n    }\n\n    private processSynchronousChanges(changes: any): {} {\n        const asyncChanges = {...changes};\n        if (Object.keys(asyncChanges).length > 0) {\n            const synchronousChanges: { [key: string]: any } = {};\n            this.SYNCHRONOUS_CHANGE_PROPERTIES.forEach((synchronousChangeProperty: string) => {\n                if (asyncChanges[synchronousChangeProperty]) {\n                    synchronousChanges[synchronousChangeProperty] = asyncChanges[synchronousChangeProperty];\n                    delete asyncChanges[synchronousChangeProperty];\n                }\n            })\n\n            if(Object.keys(synchronousChanges).length > 0 && !!this.api) {\n                ComponentUtil.processOnChange(synchronousChanges, this.gridOptions, this.api, this.columnApi)\n            }\n        }\n        return asyncChanges;\n    }\n\n    private processAsynchronousChanges(changes: {}) {\n        if (Object.keys(changes).length > 0) {\n            window.setTimeout(() => {\n                // destroyed?\n                if (this.api) {\n                    ComponentUtil.processOnChange(changes, this.gridOptions, this.api, this.columnApi)\n                }\n            });\n        }\n    }\n}\n\nAgGridReactLegacy.propTypes = {\n    gridOptions: PropTypes.object\n};\n\naddProperties(ComponentUtil.getEventCallbacks(), PropTypes.func);\naddProperties(ComponentUtil.BOOLEAN_PROPERTIES, PropTypes.bool);\naddProperties(ComponentUtil.STRING_PROPERTIES, PropTypes.string);\naddProperties(ComponentUtil.OBJECT_PROPERTIES, PropTypes.object);\naddProperties(ComponentUtil.ARRAY_PROPERTIES, PropTypes.array);\naddProperties(ComponentUtil.NUMBER_PROPERTIES, PropTypes.number);\naddProperties(ComponentUtil.FUNCTION_PROPERTIES, PropTypes.func);\n\nfunction addProperties(listOfProps: string[], propType: any) {\n    listOfProps.forEach(propKey => {\n        (AgGridReactLegacy as any)[propKey] = propType;\n    });\n}\n\nclass ReactFrameworkComponentWrapper extends BaseComponentWrapper<WrappableInterface> implements FrameworkComponentWrapper {\n    private readonly agGridReact!: AgGridReactLegacy;\n\n    constructor(agGridReact: AgGridReactLegacy) {\n        super();\n        this.agGridReact = agGridReact;\n    }\n\n    createWrapper(UserReactComponent: { new(): any; }, componentType: ComponentType): WrappableInterface {\n        return this.agGridReact.isLegacyComponentRendering() ?\n            new LegacyReactComponent(UserReactComponent, this.agGridReact, componentType) :\n            new NewReactComponent(UserReactComponent, this.agGridReact, componentType);\n    }\n}\n"]}