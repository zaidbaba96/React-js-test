{"version":3,"sources":["../../src/ts/components/framework/userComponentFactory.ts"],"names":[],"mappings":"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","file":"userComponentFactory.js","sourcesContent":["import { Autowired, Bean, Optional } from \"../../context/context\";\nimport { GridOptions } from \"../../entities/gridOptions\";\nimport { FrameworkComponentWrapper } from \"./frameworkComponentWrapper\";\nimport { ColDef, ColGroupDef, CellEditorSelectorFunc, CellRendererSelectorFunc, CellEditorSelectorResult } from \"../../entities/colDef\";\nimport { UserComponentRegistry } from \"./userComponentRegistry\";\nimport { AgComponentUtils } from \"./agComponentUtils\";\nimport { ComponentMetadata, ComponentMetadataProvider } from \"./componentMetadataProvider\";\nimport { ISetFilterParams } from \"../../interfaces/iSetFilterParams\";\nimport { IRichCellEditorParams } from \"../../interfaces/iRichCellEditorParams\";\nimport { ToolPanelDef } from \"../../entities/sideBar\";\nimport { AgPromise } from \"../../utils\";\nimport { IDateComp, IDateParams } from \"../../rendering/dateComponent\";\nimport { ICellRendererComp, ICellRendererParams, ISetFilterCellRendererParams } from \"../../rendering/cellRenderers/iCellRenderer\";\nimport { ILoadingOverlayComp, ILoadingOverlayParams } from \"../../rendering/overlays/loadingOverlayComponent\";\nimport { INoRowsOverlayComp, INoRowsOverlayParams } from \"../../rendering/overlays/noRowsOverlayComponent\";\nimport { ITooltipComp, ITooltipParams } from \"../../rendering/tooltipComponent\";\nimport { IFilterComp, IFilterParams, IFilterDef } from \"../../interfaces/iFilter\";\nimport { IFloatingFilterComp, IFloatingFilterParams } from \"../../filter/floating/floatingFilter\";\nimport { ICellEditorComp, ICellEditorParams } from \"../../interfaces/iCellEditor\";\nimport { IToolPanelComp, IToolPanelParams } from \"../../interfaces/iToolPanel\";\nimport { IStatusPanelComp, IStatusPanelParams, StatusPanelDef } from \"../../interfaces/iStatusPanel\";\nimport {\n    CellEditorComponent,\n    CellRendererComponent,\n    ComponentType,\n    DateComponent,\n    FilterComponent,\n    FloatingFilterComponent,\n    HeaderComponent,\n    HeaderGroupComponent,\n    InnerRendererComponent,\n    LoadingOverlayComponent,\n    NoRowsOverlayComponent,\n    StatusPanelComponent,\n    ToolPanelComponent,\n    TooltipComponent\n} from \"./componentTypes\";\nimport { BeanStub } from \"../../context/beanStub\";\nimport { cloneObject, mergeDeep } from '../../utils/object';\nimport { GroupCellRendererParams } from \"../../rendering/cellRenderers/groupCellRendererCtrl\";\nimport { IHeaderGroupComp, IHeaderGroupParams } from \"../../headerRendering/cells/columnGroup/headerGroupComp\";\nimport { IHeaderComp, IHeaderParams } from \"../../headerRendering/cells/column/headerComp\";\n\nexport type DefinitionObject =\n    GridOptions\n    | ColDef\n    | ColGroupDef\n    | IFilterDef\n    | ISetFilterParams\n    | IRichCellEditorParams\n    | ToolPanelDef\n    | StatusPanelDef;\n\nexport interface UserCompDetails {\n    componentClass: any;\n    componentFromFramework: boolean;\n    params: any;\n    type: ComponentType;\n}\n\n@Bean('userComponentFactory')\nexport class UserComponentFactory extends BeanStub {\n    @Autowired('gridOptions') private readonly gridOptions: GridOptions;\n    @Autowired('agComponentUtils') private readonly agComponentUtils: AgComponentUtils;\n    @Autowired('componentMetadataProvider') private readonly componentMetadataProvider: ComponentMetadataProvider;\n    @Autowired('userComponentRegistry') private readonly userComponentRegistry: UserComponentRegistry;\n    @Optional('frameworkComponentWrapper') private readonly frameworkComponentWrapper: FrameworkComponentWrapper;\n\n    //////// NEW (after React UI)\n\n    public getHeaderCompDetails(colDef: ColDef, params: IHeaderParams): UserCompDetails | undefined {\n        return this.getCompDetails(colDef, HeaderComponent, 'agColumnHeader', params);\n    }\n\n    public getHeaderGroupCompDetails(params: IHeaderGroupParams): UserCompDetails | undefined {\n        const colGroupDef = params.columnGroup.getColGroupDef()!;\n        return this.getCompDetails(colGroupDef, HeaderGroupComponent, 'agColumnGroupHeader', params);\n    }\n\n    // this one is unusual, as it can be LoadingCellRenderer, DetailCellRenderer, FullWidthCellRenderer or GroupRowRenderer.\n    // so we have to pass the type in.\n    public getFullWidthCellRendererDetails(params: ICellRendererParams, cellRendererType: string, cellRendererName: string): UserCompDetails | undefined {\n        return this.getCompDetails(this.gridOptions, { propertyName: cellRendererType, isCellRenderer: () => true }, cellRendererName, params);\n    }\n\n    // CELL RENDERER\n    public getInnerRendererDetails(def: GroupCellRendererParams, params: ICellRendererParams): UserCompDetails | undefined {\n        return this.getCompDetails(def, InnerRendererComponent, null, params);\n    }\n    public getFullWidthGroupRowInnerCellRenderer(def: any, params: ICellRendererParams): UserCompDetails | undefined {\n        return this.getCompDetails(def, InnerRendererComponent, null, params);\n    }\n    public getCellRendererDetails(def: ColDef | IRichCellEditorParams, params: ICellRendererParams): UserCompDetails | undefined {\n        return this.getCompDetails(def, CellRendererComponent, null, params);\n    }\n\n    // CELL EDITOR\n    public getCellEditorDetails(def: ColDef, params: ICellEditorParams): UserCompDetails | undefined {\n        return this.getCompDetails(def, CellEditorComponent, 'agCellEditor', params, true);\n    }\n\n    //////// OLD (before React UI)\n    public newCellRenderer(\n        def: ColDef | IRichCellEditorParams,\n        params: ICellRendererParams): AgPromise<ICellRendererComp> | null {\n        return this.lookupAndCreateComponent(def, params, CellRendererComponent, null, true);\n    }\n\n    public newDateComponent(params: IDateParams): AgPromise<IDateComp> | null {\n        return this.lookupAndCreateComponent(this.gridOptions, params, DateComponent, 'agDateInput');\n    }\n\n    public newLoadingOverlayComponent(params: ILoadingOverlayParams): AgPromise<ILoadingOverlayComp> | null {\n        return this.lookupAndCreateComponent(this.gridOptions, params, LoadingOverlayComponent, 'agLoadingOverlay');\n    }\n\n    public newNoRowsOverlayComponent(params: INoRowsOverlayParams): AgPromise<INoRowsOverlayComp> | null {\n        return this.lookupAndCreateComponent(this.gridOptions, params, NoRowsOverlayComponent, 'agNoRowsOverlay');\n    }\n\n    public newTooltipComponent(params: ITooltipParams): AgPromise<ITooltipComp> | null {\n        return this.lookupAndCreateComponent(params.colDef!, params, TooltipComponent, 'agTooltipComponent');\n    }\n\n    public newFilterComponent(def: IFilterDef, params: IFilterParams, defaultFilter: string): AgPromise<IFilterComp> | null {\n        return this.lookupAndCreateComponent(def, params, FilterComponent, defaultFilter, false);\n    }\n\n    public newSetFilterCellRenderer(\n        def: ISetFilterParams, params: ISetFilterCellRendererParams): AgPromise<ICellRendererComp> | null {\n        return this.lookupAndCreateComponent(def, params, CellRendererComponent, null, true);\n    }\n\n    public newFloatingFilterComponent(\n        def: IFilterDef, params: IFloatingFilterParams, defaultFloatingFilter: string | null): AgPromise<IFloatingFilterComp> | null {\n        return this.lookupAndCreateComponent(def, params, FloatingFilterComponent, defaultFloatingFilter, true);\n    }\n\n    public newToolPanelComponent(toolPanelDef: ToolPanelDef, params: IToolPanelParams): AgPromise<IToolPanelComp> | null {\n        return this.lookupAndCreateComponent(toolPanelDef, params, ToolPanelComponent);\n    }\n\n    public newStatusPanelComponent(def: StatusPanelDef, params: IStatusPanelParams): AgPromise<IStatusPanelComp> | null {\n        return this.lookupAndCreateComponent(def, params, StatusPanelComponent);\n    }\n\n    private lookupComponent(defObject: DefinitionObject, type: ComponentType,\n        params: any = null, defaultComponentName?: string | null): UserCompDetails | null {\n\n        const propertyName = type.propertyName;\n\n        let paramsFromSelector: any;\n        let comp: any;\n        let frameworkComp: any;\n\n        // pull from defObject if available\n        if (defObject) {\n            let defObjectAny = defObject as any;\n\n            // if selector, use this\n            const selectorFunc: CellEditorSelectorFunc | CellRendererSelectorFunc = defObjectAny[propertyName + 'Selector'];\n            const selectorRes = selectorFunc ? selectorFunc(params) : null;\n            if (selectorRes) {\n                comp = selectorRes.component;\n                frameworkComp = selectorRes.frameworkComponent;\n                paramsFromSelector = selectorRes.params;\n            } else {\n                // if no selector, or result of selector is empty, take from defObject\n                comp = defObjectAny[propertyName];\n                frameworkComp = defObjectAny[propertyName + 'Framework'];\n            }\n\n            // for filters only, we allow 'true' for the component, which means default filter to be used\n            if (comp === true) {\n                comp = undefined;\n            }\n        }\n\n        const lookupFromRegistry = (key: string) => {\n            const item = this.userComponentRegistry.retrieve(key);\n            if (item) {\n                comp = !item.componentFromFramework ? item.component : undefined;\n                frameworkComp = item.componentFromFramework ? item.component : undefined;\n            } else {\n                comp = undefined;\n                frameworkComp = undefined;\n            }\n        };\n\n        // if compOption is a string, means we need to look the item up\n        if (typeof comp === 'string') {\n            lookupFromRegistry(comp);\n        }\n\n        // if lookup brought nothing back, and we have a default, lookup the default\n        if (comp == null && frameworkComp == null && defaultComponentName != null) {\n            lookupFromRegistry(defaultComponentName);\n        }\n\n        // if we have a comp option, and it's a function, replace it with an object equivalent adaptor\n        if (comp && !this.agComponentUtils.doesImplementIComponent(comp)) {\n            comp = this.agComponentUtils.adaptFunction(propertyName, comp);\n        }\n\n        if (!comp && !frameworkComp) {\n            return null;\n        }\n\n        return {\n            componentFromFramework: comp == null,\n            componentClass: comp ? comp : frameworkComp,\n            params: paramsFromSelector,\n            type: type\n        };\n    }\n\n    public createInstanceFromCompDetails(compDetails: UserCompDetails, defaultComponentName?: string | null): AgPromise<any> | null {\n        if (!compDetails) { return null; }\n\n        const { params, componentClass, componentFromFramework } = compDetails;\n\n        // Create the component instance\n        const instance = this.createComponentInstance(compDetails.type, defaultComponentName, componentClass, componentFromFramework);\n        if (!instance) { return null; }\n\n        this.addReactHacks(params);\n\n        const deferredInit = this.initComponent(instance, params);\n\n        if (deferredInit == null) {\n            return AgPromise.resolve(instance);\n        }\n        return (deferredInit as AgPromise<void>).then(() => instance);\n    }\n\n    /**\n     * This method creates a component given everything needed to guess what sort of component needs to be instantiated\n     * It takes\n     *  @param CompClass: The class to instantiate,\n     *  @param agGridParams: Params to be passed to the component and passed by AG Grid. This will get merged with any params\n     *      specified by the user in the configuration\n     *  @param modifyParamsCallback: A chance to customise the params passed to the init method. It receives what the current\n     *  params are and the component that init is about to get called for\n     */\n    public createUserComponentFromConcreteClass(CompClass: any, agGridParams: any): any {\n        const internalComponent = new CompClass();\n\n        this.initComponent(internalComponent, agGridParams);\n\n        return internalComponent;\n    }\n\n    /**\n     * Useful to check what would be the resultant params for a given object\n     *  @param definitionObject: This is the context for which this component needs to be created, it can be gridOptions\n     *      (global) or columnDef mostly.\n     *  @param propertyName: The name of the property used in ag-grid as a convention to refer to the component, it can be:\n     *      'floatingFilter', 'cellRenderer', is used to find if the user is specifying a custom component\n     *  @param paramsFromGrid: Params to be passed to the component and passed by AG Grid. This will get merged with any params\n     *      specified by the user in the configuration\n     * @returns {TParams} It merges the user agGridParams with the actual params specified by the user.\n     */\n    public mergeParamsWithApplicationProvidedParams(\n        definitionObject: DefinitionObject,\n        propertyName: string,\n        paramsFromGrid: any,\n        paramsFromSelector: any = null): any {\n        const params = {} as any;\n\n        mergeDeep(params, paramsFromGrid);\n\n        const userParams = definitionObject ? (definitionObject as any)[propertyName + \"Params\"] : null;\n\n        if (userParams != null) {\n            if (typeof userParams === 'function') {\n                const userParamsFromFunc = userParams(paramsFromGrid);\n                mergeDeep(params, userParamsFromFunc);\n            } else if (typeof userParams === 'object') {\n                mergeDeep(params, userParams);\n            }\n        }\n\n        mergeDeep(params, paramsFromSelector);\n\n        return params;\n    }\n\n    private getCompDetails(defObject: DefinitionObject, type: ComponentType, defaultName: string | null | undefined, params: any, mandatory = false): UserCompDetails | undefined {\n        const propName = type.propertyName;\n        const compDetails = this.lookupComponent(defObject, type, params, defaultName);\n        if (!compDetails || !compDetails.componentClass) {\n            if (mandatory) {\n                this.logComponentMissing(defObject, propName);\n            }\n            return undefined;\n        }\n\n        const paramsMerged = this.mergeParamsWithApplicationProvidedParams(\n            defObject, propName, params, compDetails.params);\n\n        return { ...compDetails, params: paramsMerged };\n    }\n\n    /**\n     * This method creates a component given everything needed to guess what sort of component needs to be instantiated\n     * It takes\n     *  @param definitionObject: This is the context for which this component needs to be created, it can be gridOptions\n     *      (global) or columnDef mostly.\n     *  @param paramsFromGrid: Params to be passed to the component and passed by AG Grid. This will get merged with any params\n     *      specified by the user in the configuration\n     *  @param propertyName: The name of the property used in ag-grid as a convention to refer to the component, it can be:\n     *      'floatingFilter', 'cellRenderer', is used to find if the user is specifying a custom component\n     *  @param defaultComponentName: The actual name of the component to instantiate, this is usually the same as propertyName, but in\n     *      some cases is not, like floatingFilter, if it is the same is not necessary to specify\n     *  @param optional: Handy method to tell if this should return a component ALWAYS. if that is the case, but there is no\n     *      component found, it throws an error, by default all components are MANDATORY\n     */\n    private lookupAndCreateComponent(\n        def: DefinitionObject,\n        paramsFromGrid: any,\n        componentType: ComponentType,\n        defaultComponentName?: string | null,\n        // optional items are: FloatingFilter, CellComp (for cellRenderer)\n        optional = false\n    ): AgPromise<any> | null {\n\n        const compDetails = this.getCompDetails(\n            def, componentType, defaultComponentName, paramsFromGrid, !optional);\n\n        if (!compDetails) { return null; }\n\n        return this.createInstanceFromCompDetails(compDetails, defaultComponentName);\n    }\n\n    private addReactHacks(params: any): void {\n        // a temporary fix for AG-1574\n        // AG-1715 raised to do a wider ranging refactor to improve this\n        const agGridReact = this.context.getBean('agGridReact');\n\n        if (agGridReact) {\n            params.agGridReact = cloneObject(agGridReact);\n        }\n\n        // AG-1716 - directly related to AG-1574 and AG-1715\n        const frameworkComponentWrapper = this.context.getBean('frameworkComponentWrapper');\n\n        if (frameworkComponentWrapper) {\n            params.frameworkComponentWrapper = frameworkComponentWrapper;\n        }\n    }\n\n    private logComponentMissing(holder: any, propertyName: string, defaultComponentName?: string | null): void {\n        // to help the user, we print out the name they are looking for, rather than the default name.\n        // i don't know why the default name was originally printed out (that doesn't help the user)\n        const overrideName = holder ? (holder as any)[propertyName] : defaultComponentName;\n        const nameToReport = overrideName ? overrideName : defaultComponentName;\n        console.error(`Could not find component ${nameToReport}, did you forget to configure this component?`);\n    }\n\n    private createComponentInstance(\n        componentType: ComponentType,\n        defaultComponentName: string | null | undefined,\n        component: any,\n        componentFromFramework: boolean\n    ): any {\n        const propertyName = componentType.propertyName;\n\n        // using javascript component\n        const jsComponent = !componentFromFramework;\n        if (jsComponent) {\n            return new component!();\n        }\n\n        if (!this.frameworkComponentWrapper) {\n            console.warn(`AG Grid - Because you are using our new React UI (property reactUi=true), it is not possible to use a React Component for ${componentType.propertyName}. This is work in progress and we plan to support this soon. In the meantime, please either set reactUi=false, or replace this component with one written in JavaScript.`);\n            return null;\n        }\n\n        // Using framework component\n        const FrameworkComponentRaw: any = component;\n        const thisComponentConfig: ComponentMetadata = this.componentMetadataProvider.retrieve(propertyName);\n        return this.frameworkComponentWrapper.wrap(\n            FrameworkComponentRaw,\n            thisComponentConfig.mandatoryMethodList,\n            thisComponentConfig.optionalMethodList,\n            componentType,\n            defaultComponentName\n        );\n    }\n\n    private initComponent(component: any, params: any): AgPromise<void> | void {\n        this.context.createBean(component);\n        if (component.init == null) { return; }\n        return component.init(params);\n    }\n}\n"]}