{"version":3,"sources":["../../src/ts/filter/provided/simpleFilter.ts"],"names":[],"mappings":"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","file":"simpleFilter.js","sourcesContent":["import { IDoesFilterPassParams, IFilterOptionDef, ProvidedFilterModel } from '../../interfaces/iFilter';\nimport { RefSelector } from '../../widgets/componentAnnotations';\nimport { OptionsFactory } from './optionsFactory';\nimport { IProvidedFilterParams, ProvidedFilter } from './providedFilter';\nimport { AgPromise } from '../../utils';\nimport { AgSelect } from '../../widgets/agSelect';\nimport { AgRadioButton } from '../../widgets/agRadioButton';\nimport { forEach, every, some, includes } from '../../utils/array';\nimport { setDisplayed, setDisabled } from '../../utils/dom';\nimport { IFilterLocaleText } from '../filterLocaleText';\n\nexport type JoinOperator = 'AND' | 'OR';\n\nexport interface ISimpleFilterParams extends IProvidedFilterParams {\n    /**\n     * Array of filter options to present to the user. See [Filter Options](/filter-provided-simple/#simple-filter-options) for all options available to each filter type.\n     */\n    filterOptions?: (IFilterOptionDef | string)[];\n    /** The default filter option to be selected. */\n    defaultOption?: string;\n    /** \n     * By default, the two conditions are combined using `AND`.\n     * You can change this default by setting this property.\n     * Options: `AND`, `OR`\n     */\n    defaultJoinOperator?: JoinOperator;\n    /** \n     * If `true`, the filter will only allow one condition.\n     * Default: `false`\n     */\n    suppressAndOrCondition?: boolean;\n    /** \n     * By default, only one condition is shown, and a second is made visible once a first condition has been entered.\n     * Set this to `true` to always show both conditions. \n     * In this case the second condition will be disabled until a first condition has been entered.\n     * Default: `false`\n     */\n    alwaysShowBothConditions?: boolean;\n}\n\nexport interface ISimpleFilterModel extends ProvidedFilterModel {\n    /** One of the filter options, e.g. `'equals'` */\n    type?: string | null;\n}\n\nexport interface ICombinedSimpleModel<M extends ISimpleFilterModel> extends ProvidedFilterModel {\n    operator: JoinOperator;\n    condition1: M;\n    condition2: M;\n}\n\nexport enum ConditionPosition { One, Two }\n\n/**\n * Every filter with a dropdown where the user can specify a comparing type against the filter values\n */\nexport abstract class SimpleFilter<M extends ISimpleFilterModel> extends ProvidedFilter<M | ICombinedSimpleModel<M>> {\n\n    public static EMPTY = 'empty';\n    public static EQUALS = 'equals';\n    public static NOT_EQUAL = 'notEqual';\n    public static LESS_THAN = 'lessThan';\n    public static LESS_THAN_OR_EQUAL = 'lessThanOrEqual';\n    public static GREATER_THAN = 'greaterThan';\n    public static GREATER_THAN_OR_EQUAL = 'greaterThanOrEqual';\n    public static IN_RANGE = 'inRange';\n    public static CONTAINS = 'contains';\n    public static NOT_CONTAINS = 'notContains';\n    public static STARTS_WITH = 'startsWith';\n    public static ENDS_WITH = 'endsWith';\n\n    @RefSelector('eOptions1') protected readonly eType1: AgSelect;\n    @RefSelector('eOptions2') protected readonly eType2: AgSelect;\n    @RefSelector('eJoinOperatorPanel') protected readonly eJoinOperatorPanel: HTMLElement;\n    @RefSelector('eJoinOperatorAnd') protected readonly eJoinOperatorAnd: AgRadioButton;\n    @RefSelector('eJoinOperatorOr') protected readonly eJoinOperatorOr: AgRadioButton;\n    @RefSelector('eCondition1Body') protected readonly eCondition1Body: HTMLElement;\n    @RefSelector('eCondition2Body') protected readonly eCondition2Body: HTMLElement;\n\n    private allowTwoConditions: boolean;\n    private alwaysShowBothConditions: boolean;\n    private defaultJoinOperator: JoinOperator | undefined;\n\n    protected optionsFactory: OptionsFactory;\n    protected abstract getDefaultFilterOptions(): string[];\n\n    // gets called once during initialisation, to build up the html template\n    protected abstract createValueTemplate(position: ConditionPosition): string;\n\n    // returns true in the row passes the said condition\n    protected abstract individualConditionPasses(params: IDoesFilterPassParams, type: ISimpleFilterModel): boolean;\n\n    // returns true if the UI represents a working filter, eg all parts are filled out.\n    // eg if text filter and textfield blank then returns false.\n    protected abstract isConditionUiComplete(position: ConditionPosition): boolean;\n\n    // filter uses this to know if new model is different from previous model, ie if filter has changed\n    protected abstract areSimpleModelsEqual(a: ISimpleFilterModel, b: ISimpleFilterModel): boolean;\n\n    // after floating filter changes, this sets the 'value' section. this is implemented by the base class\n    // (as that's where value is controlled), the 'type' part from the floating filter is dealt with in this class.\n    protected abstract setValueFromFloatingFilter(value: string): void;\n\n    // getModel() calls this to create the two conditions. if only one condition,\n    // the result is returned by getModel(), otherwise is called twice and both results\n    // returned in a CombinedFilter object.\n    protected abstract createCondition(position: ConditionPosition): M;\n\n    // puts model values into the UI\n    protected abstract setConditionIntoUi(model: ISimpleFilterModel | null, position: ConditionPosition): void;\n\n    // returns true if this type requires a 'from' field, eg any filter that requires at least one text value\n    protected showValueFrom(type?: string | null): boolean {\n        return !this.doesFilterHaveHiddenInput(type) && type !== SimpleFilter.EMPTY;\n    }\n\n    // returns true if this type requires a 'to' field, currently only 'range' returns true\n    protected showValueTo(type?: string | null): boolean {\n        return type === SimpleFilter.IN_RANGE;\n    }\n\n    // floating filter calls this when user applies filter from floating filter\n    public onFloatingFilterChanged(type: string | null | undefined, value: any): void {\n        this.setTypeFromFloatingFilter(type);\n        this.setValueFromFloatingFilter(value);\n        this.onUiChanged(true);\n    }\n\n    protected setTypeFromFloatingFilter(type?: string | null): void {\n        this.eType1.setValue(type);\n        this.eType2.setValue(this.optionsFactory.getDefaultOption());\n        (this.isDefaultOperator('AND') ? this.eJoinOperatorAnd : this.eJoinOperatorOr).setValue(true);\n    }\n\n    public getModelFromUi(): M | ICombinedSimpleModel<M> | null {\n        if (!this.isConditionUiComplete(ConditionPosition.One)) {\n            return null;\n        }\n\n        if (this.isAllowTwoConditions() && this.isConditionUiComplete(ConditionPosition.Two)) {\n            return {\n                filterType: this.getFilterType(),\n                operator: this.getJoinOperator(),\n                condition1: this.createCondition(ConditionPosition.One),\n                condition2: this.createCondition(ConditionPosition.Two)\n            };\n        }\n\n        return this.createCondition(ConditionPosition.One);\n    }\n\n    protected getCondition1Type(): string | null | undefined {\n        return this.eType1.getValue();\n    }\n\n    protected getCondition2Type(): string | null | undefined {\n        return this.eType2.getValue();\n    }\n\n    protected getJoinOperator(): JoinOperator {\n        return this.eJoinOperatorOr.getValue() === true ? 'OR' : 'AND';\n    }\n\n    protected areModelsEqual(a: M | ICombinedSimpleModel<M>, b: M | ICombinedSimpleModel<M>): boolean {\n        // both are missing\n        if (!a && !b) { return true; }\n\n        // one is missing, other present\n        if ((!a && b) || (a && !b)) { return false; }\n\n        // one is combined, the other is not\n        const aIsSimple = !(a as any).operator;\n        const bIsSimple = !(b as any).operator;\n        const oneSimpleOneCombined = (!aIsSimple && bIsSimple) || (aIsSimple && !bIsSimple);\n        if (oneSimpleOneCombined) { return false; }\n\n        let res: boolean;\n\n        // otherwise both present, so compare\n        if (aIsSimple) {\n            const aSimple = a as M;\n            const bSimple = b as M;\n\n            res = this.areSimpleModelsEqual(aSimple, bSimple);\n        } else {\n            const aCombined = a as ICombinedSimpleModel<M>;\n            const bCombined = b as ICombinedSimpleModel<M>;\n\n            res = aCombined.operator === bCombined.operator\n                && this.areSimpleModelsEqual(aCombined.condition1, bCombined.condition1)\n                && this.areSimpleModelsEqual(aCombined.condition2, bCombined.condition2);\n        }\n\n        return res;\n    }\n\n    protected setModelIntoUi(model: ISimpleFilterModel | ICombinedSimpleModel<M>): AgPromise<void> {\n        const isCombined = (model as any).operator;\n\n        if (isCombined) {\n            const combinedModel = model as ICombinedSimpleModel<M>;\n\n            const orChecked = combinedModel.operator === 'OR';\n            this.eJoinOperatorAnd.setValue(!orChecked);\n            this.eJoinOperatorOr.setValue(orChecked);\n\n            this.eType1.setValue(combinedModel.condition1.type);\n            this.eType2.setValue(combinedModel.condition2.type);\n\n            this.setConditionIntoUi(combinedModel.condition1, ConditionPosition.One);\n            this.setConditionIntoUi(combinedModel.condition2, ConditionPosition.Two);\n        } else {\n            const simpleModel = model as ISimpleFilterModel;\n\n            this.eJoinOperatorAnd.setValue(this.isDefaultOperator('AND'));\n            this.eJoinOperatorOr.setValue(this.isDefaultOperator('OR'));\n\n            this.eType1.setValue(simpleModel.type);\n            this.eType2.setValue(this.optionsFactory.getDefaultOption());\n\n            this.setConditionIntoUi(simpleModel as M, ConditionPosition.One);\n            this.setConditionIntoUi(null, ConditionPosition.Two);\n        }\n\n        return AgPromise.resolve();\n    }\n\n    public doesFilterPass(params: IDoesFilterPassParams): boolean {\n        const model = this.getModel();\n\n        if (model == null) { return true; }\n\n        const { operator } = model as ICombinedSimpleModel<M>;\n        const models: ISimpleFilterModel[] = [];\n\n        if (operator) {\n            const combinedModel = model as ICombinedSimpleModel<M>;\n\n            models.push(combinedModel.condition1, combinedModel.condition2);\n        } else {\n            models.push(model as ISimpleFilterModel);\n        }\n\n        const combineFunction = operator && operator === 'OR' ? some : every;\n\n        return combineFunction(models, m => this.individualConditionPasses(params, m));\n    }\n\n    protected setParams(params: ISimpleFilterParams): void {\n        super.setParams(params);\n\n        this.optionsFactory = new OptionsFactory();\n        this.optionsFactory.init(params, this.getDefaultFilterOptions());\n\n        this.allowTwoConditions = !params.suppressAndOrCondition;\n        this.alwaysShowBothConditions = !!params.alwaysShowBothConditions;\n        this.defaultJoinOperator = this.getDefaultJoinOperator(params.defaultJoinOperator);\n\n        this.putOptionsIntoDropdown();\n        this.addChangedListeners();\n    }\n\n    private getDefaultJoinOperator(defaultJoinOperator?: JoinOperator): JoinOperator | undefined {\n        return includes(['AND', 'OR'], defaultJoinOperator) ? defaultJoinOperator : 'AND';\n    }\n\n    private putOptionsIntoDropdown(): void {\n        const filterOptions = this.optionsFactory.getFilterOptions();\n\n        forEach(filterOptions, option => {\n            let value: string;\n            let text: string;\n\n            if (typeof option === 'string') {\n                value = option;\n                text = this.translate(value as keyof IFilterLocaleText);\n            } else {\n                value = option.displayKey;\n\n                const customOption = this.optionsFactory.getCustomOption(value);\n\n                text = customOption ?\n                    this.gridOptionsWrapper.getLocaleTextFunc()(customOption.displayKey, customOption.displayName) :\n                    this.translate(value as keyof IFilterLocaleText);\n            }\n\n            const createOption = () => ({ value, text });\n\n            this.eType1.addOption(createOption());\n            this.eType2.addOption(createOption());\n        });\n\n        const readOnly = filterOptions.length <= 1;\n\n        this.eType1.setDisabled(readOnly);\n        this.eType2.setDisabled(readOnly);\n    }\n\n    public isAllowTwoConditions(): boolean {\n        return this.allowTwoConditions;\n    }\n\n    protected createBodyTemplate(): string {\n        return /* html */`\n            <ag-select class=\"ag-filter-select\" ref=\"eOptions1\"></ag-select>\n            ${this.createValueTemplate(ConditionPosition.One)}\n            <div class=\"ag-filter-condition\" ref=\"eJoinOperatorPanel\">\n               <ag-radio-button ref=\"eJoinOperatorAnd\" class=\"ag-filter-condition-operator ag-filter-condition-operator-and\"></ag-radio-button>\n               <ag-radio-button ref=\"eJoinOperatorOr\" class=\"ag-filter-condition-operator ag-filter-condition-operator-or\"></ag-radio-button>\n            </div>\n            <ag-select class=\"ag-filter-select\" ref=\"eOptions2\"></ag-select>\n            ${this.createValueTemplate(ConditionPosition.Two)}`;\n    }\n\n    protected getCssIdentifier() {\n        return 'simple-filter';\n    }\n\n    protected updateUiVisibility(): void {\n        const isCondition2Enabled = this.isCondition2Enabled();\n\n        if (this.alwaysShowBothConditions) {\n            this.eJoinOperatorAnd.setDisabled(!isCondition2Enabled);\n            this.eJoinOperatorOr.setDisabled(!isCondition2Enabled);\n            this.eType2.setDisabled(!isCondition2Enabled);\n            setDisabled(this.eCondition2Body, !isCondition2Enabled);\n        } else {\n            setDisplayed(this.eJoinOperatorPanel, isCondition2Enabled);\n            setDisplayed(this.eType2.getGui(), isCondition2Enabled);\n            setDisplayed(this.eCondition2Body, isCondition2Enabled);\n        }\n    }\n\n    protected isCondition2Enabled(): boolean {\n        return this.allowTwoConditions && this.isConditionUiComplete(ConditionPosition.One);\n    }\n\n    protected resetUiToDefaults(silent?: boolean): AgPromise<void> {\n        const translate = this.gridOptionsWrapper.getLocaleTextFunc();\n        const filteringLabel = translate('ariaFilteringOperator', 'Filtering operator');\n        const uniqueGroupId = 'ag-simple-filter-and-or-' + this.getCompId();\n        const defaultOption = this.optionsFactory.getDefaultOption();\n\n        this.eType1.setValue(defaultOption, silent).setAriaLabel(filteringLabel);\n        this.eType2.setValue(defaultOption, silent).setAriaLabel(filteringLabel);\n\n        this.eJoinOperatorAnd\n            .setValue(this.isDefaultOperator('AND'), silent)\n            .setName(uniqueGroupId)\n            .setLabel(this.translate('andCondition'));\n\n        this.eJoinOperatorOr\n            .setValue(this.isDefaultOperator('OR'), silent)\n            .setName(uniqueGroupId)\n            .setLabel(this.translate('orCondition'));\n\n        return AgPromise.resolve();\n    }\n\n    private isDefaultOperator(operator: JoinOperator): boolean {\n        return operator === this.defaultJoinOperator;\n    }\n\n    private addChangedListeners() {\n        const listener = () => this.onUiChanged();\n        this.eType1.onValueChange(listener);\n        this.eType2.onValueChange(listener);\n        this.eJoinOperatorOr.onValueChange(listener);\n        this.eJoinOperatorAnd.onValueChange(listener);\n    }\n\n    protected doesFilterHaveHiddenInput(filterType?: string | null) {\n        const customFilterOption = this.optionsFactory.getCustomOption(filterType);\n\n        return customFilterOption && customFilterOption.hideFilterInput;\n    }\n}\n"]}