{"version":3,"sources":["../../src/ts/filter/provided/text/textFilter.ts"],"names":[],"mappings":"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","file":"textFilter.js","sourcesContent":["import { IDoesFilterPassParams } from '../../../interfaces/iFilter';\nimport { RefSelector } from '../../../widgets/componentAnnotations';\nimport {\n    SimpleFilter,\n    ConditionPosition,\n    ISimpleFilterParams,\n    ISimpleFilterModel\n} from '../simpleFilter';\nimport { AgInputTextField } from '../../../widgets/agInputTextField';\nimport { makeNull } from '../../../utils/generic';\nimport { setDisplayed } from '../../../utils/dom';\nimport { IAfterGuiAttachedParams } from '../../../interfaces/iAfterGuiAttachedParams';\nimport { AgPromise } from '../../../utils';\nimport { forEach } from '../../../utils/array';\n\nexport interface TextFilterModel extends ISimpleFilterModel {\n    /** Filter type is always `'text'` */\n    filterType?: 'text';\n    /**\n     * The text value associated with the filter.\n     * It's optional as custom filters may not have a text value.\n     * */\n    filter?: string | null;\n}\n\nexport interface TextComparator {\n    (filter: string | null | undefined, gridValue: any, filterText: string | null): boolean;\n}\n\nexport interface TextFormatter {\n    (from?: string | null): string | null;\n}\n\nexport interface ITextFilterParams extends ISimpleFilterParams {\n    /** \n     * Used to override how to filter based on the user input.\n     */\n    textCustomComparator?: TextComparator;\n    /** \n     * By default, text filtering is case-insensitive. Set this to `true` to make text filtering case-sensitive.\n     * Default: `false`\n     */\n    caseSensitive?: boolean;\n    /** \n     * Formats the text before applying the filter compare logic.\n     * Useful if you want to substitute accented characters, for example.\n     */\n    textFormatter?: (from: string) => string;\n\n    /**\n     * If `true`, the input that the user enters will be trimmed when the filter is applied, so any leading or trailing whitespace will be removed.\n     * If only whitespace is entered, it will be left as-is.\n     * If you enable `trimInput`, it is best to also increase the `debounceMs` to give users more time to enter text.\n     * Default: `false`\n     */\n    trimInput?: boolean;\n}\n\nexport class TextFilter extends SimpleFilter<TextFilterModel> {\n    public static DEFAULT_FILTER_OPTIONS = [\n        SimpleFilter.CONTAINS,\n        SimpleFilter.NOT_CONTAINS,\n        SimpleFilter.EQUALS,\n        SimpleFilter.NOT_EQUAL,\n        SimpleFilter.STARTS_WITH,\n        SimpleFilter.ENDS_WITH\n    ];\n\n    static DEFAULT_FORMATTER: TextFormatter = (from: string) => from;\n\n    static DEFAULT_LOWERCASE_FORMATTER: TextFormatter = (from: string) => from == null ? null : from.toString().toLowerCase();\n\n    static DEFAULT_COMPARATOR: TextComparator = (filter: string, value: any, filterText: string) => {\n        switch (filter) {\n            case TextFilter.CONTAINS:\n                return value.indexOf(filterText) >= 0;\n            case TextFilter.NOT_CONTAINS:\n                return value.indexOf(filterText) < 0;\n            case TextFilter.EQUALS:\n                return value === filterText;\n            case TextFilter.NOT_EQUAL:\n                return value != filterText;\n            case TextFilter.STARTS_WITH:\n                return value.indexOf(filterText) === 0;\n            case TextFilter.ENDS_WITH:\n                const index = value.lastIndexOf(filterText);\n                return index >= 0 && index === (value.length - filterText.length);\n            default:\n                // should never happen\n                console.warn('AG Grid: Unexpected type of filter \"' + filter + '\", it looks like the filter was configured with incorrect Filter Options');\n                return false;\n        }\n    };\n\n    @RefSelector('eValue1') private readonly eValue1: AgInputTextField;\n    @RefSelector('eValue2') private readonly eValue2: AgInputTextField;\n\n    private comparator: TextComparator;\n    private formatter: TextFormatter;\n\n    private textFilterParams: ITextFilterParams;\n\n    constructor() {\n        super('textFilter');\n    }\n\n    public static trimInput(value?: string | null): string | null | undefined {\n        const trimmedInput = value && value.trim();\n\n        // trim the input, unless it is all whitespace (this is consistent with Excel behaviour)\n        return trimmedInput === '' ? value : trimmedInput;\n    }\n\n    protected getDefaultDebounceMs(): number {\n        return 500;\n    }\n\n    private getCleanValue(inputField: AgInputTextField): string | null | undefined {\n        const value = makeNull(inputField.getValue());\n\n        return this.textFilterParams.trimInput ? TextFilter.trimInput(value) : value;\n    }\n\n    private addValueChangedListeners(): void {\n        const listener = () => this.onUiChanged();\n        this.eValue1.onValueChange(listener);\n        this.eValue2.onValueChange(listener);\n    }\n\n    protected setParams(params: ITextFilterParams): void {\n        super.setParams(params);\n\n        this.textFilterParams = params;\n        this.comparator = this.textFilterParams.textCustomComparator || TextFilter.DEFAULT_COMPARATOR;\n        this.formatter = this.textFilterParams.textFormatter ||\n            (this.textFilterParams.caseSensitive ? TextFilter.DEFAULT_FORMATTER : TextFilter.DEFAULT_LOWERCASE_FORMATTER);\n\n        this.addValueChangedListeners();\n    }\n\n    protected setConditionIntoUi(model: TextFilterModel, position: ConditionPosition): void {\n        const positionOne = position === ConditionPosition.One;\n        const eValue = positionOne ? this.eValue1 : this.eValue2;\n\n        eValue.setValue(model ? model.filter : null);\n    }\n\n    protected createCondition(position: ConditionPosition): TextFilterModel {\n        const positionOne = position === ConditionPosition.One;\n        const type = positionOne ? this.getCondition1Type() : this.getCondition2Type();\n        const eValue = positionOne ? this.eValue1 : this.eValue2;\n        const value = this.getCleanValue(eValue);\n        eValue.setValue(value, true); // ensure clean value is visible\n\n        const model: TextFilterModel = {\n            filterType: this.getFilterType(),\n            type\n        };\n\n        if (!this.doesFilterHaveHiddenInput(type)) {\n            model.filter = value;\n        }\n\n        return model;\n    }\n\n    protected getFilterType(): 'text' {\n        return 'text';\n    }\n\n    protected areSimpleModelsEqual(aSimple: TextFilterModel, bSimple: TextFilterModel): boolean {\n        return aSimple.filter === bSimple.filter && aSimple.type === bSimple.type;\n    }\n\n    protected resetUiToDefaults(silent?: boolean): AgPromise<void> {\n        return super.resetUiToDefaults(silent).then(() => {\n            this.forEachInput(field => field.setValue(null, silent));\n            this.resetPlaceholder();\n        });\n    }\n\n    private resetPlaceholder(): void {\n        const globalTranslate = this.gridOptionsWrapper.getLocaleTextFunc();\n        const placeholder = this.translate('filterOoo');\n\n        this.forEachInput(field => {\n            field.setInputPlaceholder(placeholder);\n            field.setInputAriaLabel(globalTranslate('ariaFilterValue', 'Filter Value'));\n        });\n    }\n\n    private forEachInput(action: (field: AgInputTextField) => void): void {\n        forEach([this.eValue1, this.eValue2], action);\n    }\n\n    protected setValueFromFloatingFilter(value: string): void {\n        this.eValue1.setValue(value);\n        this.eValue2.setValue(null);\n    }\n\n    protected getDefaultFilterOptions(): string[] {\n        return TextFilter.DEFAULT_FILTER_OPTIONS;\n    }\n\n    protected createValueTemplate(position: ConditionPosition): string {\n        const pos = position === ConditionPosition.One ? '1' : '2';\n\n        return /* html */`\n            <div class=\"ag-filter-body\" ref=\"eCondition${pos}Body\" role=\"presentation\">\n                <ag-input-text-field class=\"ag-filter-filter\" ref=\"eValue${pos}\"></ag-input-text-field>\n            </div>`;\n    }\n\n    protected updateUiVisibility(): void {\n        super.updateUiVisibility();\n\n        setDisplayed(this.eCondition1Body, this.showValueFrom(this.getCondition1Type()));\n        setDisplayed(this.eCondition2Body, this.isCondition2Enabled() && this.showValueFrom(this.getCondition2Type()));\n    }\n\n    public afterGuiAttached(params?: IAfterGuiAttachedParams) {\n        super.afterGuiAttached(params);\n\n        this.resetPlaceholder();\n\n        if (!params || !params.suppressFocus) {\n            this.eValue1.getInputElement().focus();\n        }\n    }\n\n    protected isConditionUiComplete(position: ConditionPosition): boolean {\n        const positionOne = position === ConditionPosition.One;\n        const option = positionOne ? this.getCondition1Type() : this.getCondition2Type();\n\n        if (option === SimpleFilter.EMPTY) { return false; }\n        if (this.doesFilterHaveHiddenInput(option)) { return true; }\n\n        return this.getCleanValue(positionOne ? this.eValue1 : this.eValue2) != null;\n    }\n\n    protected individualConditionPasses(params: IDoesFilterPassParams, filterModel: TextFilterModel): boolean {\n        const filterText = filterModel.filter;\n        const filterOption = filterModel.type;\n        const cellValue = this.textFilterParams.valueGetter(params.node);\n        const cellValueFormatted = this.formatter(cellValue);\n        const customFilterOption = this.optionsFactory.getCustomOption(filterOption);\n\n        if (customFilterOption) {\n            // only execute the custom filter if a value exists or a value isn't required, i.e. input is hidden\n            if (filterText != null || customFilterOption.hideFilterInput) {\n                return customFilterOption.test(filterText, cellValueFormatted);\n            }\n        }\n\n        if (cellValue == null) {\n            return filterOption === SimpleFilter.NOT_EQUAL || filterOption === SimpleFilter.NOT_CONTAINS;\n        }\n\n        const filterTextFormatted = this.formatter(filterText);\n\n        return this.comparator(filterOption, cellValueFormatted, filterTextFormatted);\n    }\n}\n"]}