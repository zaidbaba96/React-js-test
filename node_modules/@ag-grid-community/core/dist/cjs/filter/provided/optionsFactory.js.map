{"version":3,"sources":["../../src/ts/filter/provided/optionsFactory.ts"],"names":[],"mappings":";;;;;;;;AAGA,2CAA0C;AAE1C,0EAA0E;AAC1E;IAAA;QACc,wBAAmB,GAA0C,EAAE,CAAC;IA4D9E,CAAC;IAxDU,6BAAI,GAAX,UAAY,MAA2B,EAAE,cAAwB;QAC7D,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,aAAa,IAAI,cAAc,CAAC;QAC5D,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxB,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;IACnC,CAAC;IAEM,yCAAgB,GAAvB;QACI,OAAO,IAAI,CAAC,aAAa,CAAC;IAC9B,CAAC;IAEO,yCAAgB,GAAxB;QAAA,iBAmBC;QAlBG,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;YAAE,OAAO;SAAE;QAEpC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,UAAA,YAAY;YACnC,IAAI,OAAO,YAAY,KAAK,QAAQ,EAAE;gBAAE,OAAO;aAAE;YAEjD,IAAM,kBAAkB,GAA+B,CAAC,YAAY,EAAE,aAAa,EAAE,MAAM,CAAC,CAAC;YAE7F,IAAI,aAAK,CAAC,kBAAkB,EAAE,UAAA,GAAG;gBAC7B,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE;oBACpB,OAAO,CAAC,IAAI,CAAC,gEAA8D,GAAG,MAAG,CAAC,CAAC;oBACnF,OAAO,KAAK,CAAC;iBAChB;gBAED,OAAO,IAAI,CAAC;YAChB,CAAC,CAAC,EAAE;gBACA,KAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,UAAU,CAAC,GAAG,YAAY,CAAC;aACpE;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,0CAAiB,GAAzB,UAA0B,MAA2B;QACjD,IAAI,MAAM,CAAC,aAAa,EAAE;YACtB,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,aAAa,CAAC;SAC7C;aAAM,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,IAAI,CAAC,EAAE;YACvC,IAAM,iBAAiB,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;YAEhD,IAAI,OAAO,iBAAiB,KAAK,QAAQ,EAAE;gBACvC,IAAI,CAAC,aAAa,GAAG,iBAAiB,CAAC;aAC1C;iBAAM,IAAI,iBAAiB,CAAC,UAAU,EAAE;gBACrC,IAAI,CAAC,aAAa,GAAG,iBAAiB,CAAC,UAAU,CAAC;aACrD;iBAAM;gBACH,OAAO,CAAC,IAAI,CAAC,gFAAgF,CAAC,CAAC;aAClG;SACJ;aAAM;YACH,OAAO,CAAC,IAAI,CAAC,uCAAuC,CAAC,CAAC;SACzD;IACL,CAAC;IAEM,yCAAgB,GAAvB;QACI,OAAO,IAAI,CAAC,aAAa,CAAC;IAC9B,CAAC;IAEM,wCAAe,GAAtB,UAAuB,IAAoB;QACvC,OAAO,IAAI,CAAC,mBAAmB,CAAC,IAAK,CAAC,CAAC;IAC3C,CAAC;IACL,qBAAC;AAAD,CA7DA,AA6DC,IAAA;AA7DY,wCAAc","file":"optionsFactory.js","sourcesContent":["import { IFilterOptionDef } from '../../interfaces/iFilter';\nimport { IScalarFilterParams } from './scalarFilter';\nimport { ISimpleFilterParams } from './simpleFilter';\nimport { every } from '../../utils/array';\n\n/* Common logic for options, used by both filters and floating filters. */\nexport class OptionsFactory {\n    protected customFilterOptions: { [name: string]: IFilterOptionDef; } = {};\n    protected filterOptions: (IFilterOptionDef | string)[];\n    protected defaultOption: string;\n\n    public init(params: IScalarFilterParams, defaultOptions: string[]): void {\n        this.filterOptions = params.filterOptions || defaultOptions;\n        this.mapCustomOptions();\n        this.selectDefaultItem(params);\n    }\n\n    public getFilterOptions(): (IFilterOptionDef | string)[] {\n        return this.filterOptions;\n    }\n\n    private mapCustomOptions(): void {\n        if (!this.filterOptions) { return; }\n\n        this.filterOptions.forEach(filterOption => {\n            if (typeof filterOption === 'string') { return; }\n\n            const requiredProperties: (keyof IFilterOptionDef)[] = ['displayKey', 'displayName', 'test'];\n\n            if (every(requiredProperties, key => {\n                if (!filterOption[key]) {\n                    console.warn(`AG Grid: ignoring FilterOptionDef as it doesn't contain a '${key}'`);\n                    return false;\n                }\n\n                return true;\n            })) {\n                this.customFilterOptions[filterOption.displayKey] = filterOption;\n            }\n        });\n    }\n\n    private selectDefaultItem(params: ISimpleFilterParams): void {\n        if (params.defaultOption) {\n            this.defaultOption = params.defaultOption;\n        } else if (this.filterOptions.length >= 1) {\n            const firstFilterOption = this.filterOptions[0];\n\n            if (typeof firstFilterOption === 'string') {\n                this.defaultOption = firstFilterOption;\n            } else if (firstFilterOption.displayKey) {\n                this.defaultOption = firstFilterOption.displayKey;\n            } else {\n                console.warn(`AG Grid: invalid FilterOptionDef supplied as it doesn't contain a 'displayKey'`);\n            }\n        } else {\n            console.warn('AG Grid: no filter options for filter');\n        }\n    }\n\n    public getDefaultOption(): string {\n        return this.defaultOption;\n    }\n\n    public getCustomOption(name?: string | null): IFilterOptionDef | undefined {\n        return this.customFilterOptions[name!];\n    }\n}\n"]}