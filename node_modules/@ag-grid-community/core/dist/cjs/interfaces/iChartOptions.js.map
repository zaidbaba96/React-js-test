{"version":3,"sources":["../../src/ts/interfaces/iChartOptions.ts"],"names":[],"mappings":";;;;;;;;AAAA,IAAY,SAkBX;AAlBD,WAAY,SAAS;IACjB,8BAAiB,CAAA;IACjB,4CAA+B,CAAA;IAC/B,4CAA+B,CAAA;IAC/B,kDAAqC,CAAA;IACrC,wBAAW,CAAA;IACX,sCAAyB,CAAA;IACzB,sCAAyB,CAAA;IACzB,4CAA+B,CAAA;IAC/B,0BAAa,CAAA;IACb,gCAAmB,CAAA;IACnB,8BAAiB,CAAA;IACjB,wBAAW,CAAA;IACX,kCAAqB,CAAA;IACrB,0BAAa,CAAA;IACb,wCAA2B,CAAA;IAC3B,8CAAiC,CAAA;IACjC,oCAAuB,CAAA;AAC3B,CAAC,EAlBW,SAAS,GAAT,iBAAS,KAAT,iBAAS,QAkBpB;AAoED,IAAY,cAKX;AALD,WAAY,cAAc;IACtB,6BAAW,CAAA;IACX,iCAAe,CAAA;IACf,mCAAiB,CAAA;IACjB,+BAAa,CAAA;AACjB,CAAC,EALW,cAAc,GAAd,sBAAc,KAAd,sBAAc,QAKzB","file":"iChartOptions.js","sourcesContent":["export enum ChartType {\n    Column = 'column',\n    GroupedColumn = 'groupedColumn',\n    StackedColumn = 'stackedColumn',\n    NormalizedColumn = 'normalizedColumn',\n    Bar = 'bar',\n    GroupedBar = 'groupedBar',\n    StackedBar = 'stackedBar',\n    NormalizedBar = 'normalizedBar',\n    Line = 'line',\n    Scatter = 'scatter',\n    Bubble = 'bubble',\n    Pie = 'pie',\n    Doughnut = 'doughnut',\n    Area = 'area',\n    StackedArea = 'stackedArea',\n    NormalizedArea = 'normalizedArea',\n    Histogram = 'histogram'\n}\n\nexport type ChartMenuOptions = 'chartSettings' | 'chartData' | 'chartFormat' | 'chartLink' | 'chartUnlink' | 'chartDownload';\n\nexport interface SeriesOptions {\n    fill: FillOptions;\n    stroke: StrokeOptions;\n    highlightStyle: HighlightOptions;\n    listeners?: { [key in string]: Function };\n}\n\nexport interface ChartTooltip {\n    enabled?: boolean;\n    class?: string;\n    tracking?: boolean;\n    delay?: number;\n}\n\nexport interface ChartOptions<T extends SeriesOptions> {\n    document?: Document;\n    seriesDefaults: T;\n    width?: number;\n    height?: number;\n    padding: PaddingOptions;\n    background: BackgroundOptions;\n    title: CaptionOptions;\n    subtitle: CaptionOptions;\n    navigator: NavigatorOptions;\n    legend: LegendOptions;\n    tooltip?: ChartTooltip;\n    listeners?: { [key in string]: Function };\n}\n\nexport interface PaddingOptions {\n    top: number;\n    right: number;\n    bottom: number;\n    left: number;\n}\n\nexport interface BackgroundOptions {\n    fill: string;\n    visible: boolean;\n}\n\nexport interface FontOptions {\n    fontStyle: FontStyle;\n    fontWeight: FontWeight;\n    fontSize: number;\n    fontFamily: string;\n    color: string;\n}\n\nexport declare type FontStyle = 'normal' | 'italic' | 'oblique';\nexport declare type FontWeight = 'normal' | 'bold' | 'bolder' | 'lighter' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900';\n\nexport interface CaptionOptions extends FontOptions {\n    enabled: boolean;\n    text?: string;\n}\n\nexport interface LegendOptions {\n    enabled: boolean;\n    position: LegendPosition;\n    spacing: number;\n    item: LegendItemOptions;\n}\n\nexport enum LegendPosition {\n    Top = 'top',\n    Right = 'right',\n    Bottom = 'bottom',\n    Left = 'left'\n}\n\nexport interface LegendItemOptions {\n    label: LegendLabelOptions;\n    marker: LegendMarkerOptions;\n    paddingX: number;\n    paddingY: number;\n}\n\nexport interface LegendLabelOptions extends FontOptions {\n}\n\nexport interface NavigatorOptions {\n    enabled: boolean;\n    height: number;\n    min: number;\n    max: number;\n    mask: NavigatorMaskOptions;\n    minHandle: NavigatorHandleOptions;\n    maxHandle: NavigatorHandleOptions;\n}\n\nexport interface NavigatorMaskOptions {\n    fill: string;\n    stroke: string;\n    strokeWidth: number;\n    fillOpacity: number;\n}\n\nexport interface NavigatorHandleOptions {\n    fill: string;\n    stroke: string;\n    strokeWidth: number;\n    width: number;\n    height: number;\n    gripLineGap: number;\n    gripLineLength: number;\n}\n\nexport type MarkerShape = 'circle' | 'cross' | 'diamond' | 'plus' | 'square' | 'triangle';\n\nexport interface LegendMarkerOptions {\n    shape: MarkerShape;\n    size: number;\n    padding: number;\n    strokeWidth: number;\n}\n\nexport interface CartesianChartOptions<T extends SeriesOptions> extends ChartOptions<T> {\n    xAxis: AxisOptions;\n    yAxis: AxisOptions;\n    navigator: NavigatorOptions;\n}\n\nexport interface PolarChartOptions<T extends SeriesOptions> extends ChartOptions<T> {\n}\n\nexport interface AxisOptions {\n    type?: AxisType;\n    title: CaptionOptions;\n    line: AxisLineOptions;\n    tick: AxisTickOptions;\n    label: AxisLabelOptions;\n    gridStyle: GridStyle[];\n}\n\nexport type AxisType = 'category' | 'number' | 'time';\n\nexport interface AxisLineOptions {\n    width: number;\n    color: string;\n}\n\nexport interface AxisTickOptions {\n    width: number;\n    size: number;\n    color: string;\n}\n\nexport interface AxisLabelFormatterParams {\n    value: any;\n    index: number;\n    fractionDigits?: number;\n    formatter?: (x: any) => string;\n}\n\nexport interface AxisLabelOptions extends FontOptions {\n    padding: number;\n    rotation: number;\n    format?: string;\n    formatter?: (params: AxisLabelFormatterParams) => string;\n}\n\nexport interface GridStyle {\n    stroke: string;\n    lineDash?: number[];\n}\n\nexport interface HighlightOptions {\n    fill: string;\n    stroke?: string;\n    strokeWidth?: number;\n    series?: {\n        enabled?: boolean;\n        dimOpacity?: number;\n        strokeWidth?: number;\n    }\n}\n\nexport interface FillOptions {\n    colors: string[];\n    opacity: number;\n}\n\nexport interface StrokeOptions {\n    colors: string[];\n    opacity: number;\n    width: number;\n}\n\nexport interface DropShadowOptions {\n    enabled: boolean;\n    color: string;\n    xOffset: number;\n    yOffset: number;\n    blur: number;\n}\n\nexport interface SeriesLabelOptions extends FontOptions {\n    enabled: boolean;\n}\n\ninterface TooltipRendererResult {\n    content: string;\n    title?: string;\n}\n\nexport interface TooltipOptions<TParams> {\n    enabled: boolean;\n    renderer?: (params: TParams) => string | TooltipRendererResult;\n}\n\nexport interface TooltipRendererParams {\n    datum: any;\n    title?: string;\n    color: string;\n}\n\nexport interface CartesianTooltipRendererParams extends TooltipRendererParams {\n    xKey: string;\n    xValue: any;\n    xName: string;\n\n    yKey: string;\n    yValue: any;\n    yName: string;\n}\n\nexport interface BarSeriesOptions extends SeriesOptions {\n    shadow: DropShadowOptions;\n    label: BarSeriesLabelOptions;\n    tooltip: TooltipOptions<BarTooltipRendererParams>;\n    lineDash: number[];\n    lineDashOffset: number;\n}\n\nexport interface HistogramSeriesOptions extends BarSeriesOptions {\n    binCount?: number;\n}\n\nexport interface BarSeriesLabelOptions extends SeriesLabelOptions {\n    formatter?: (params: { value: number }) => string;\n}\n\nexport interface BarTooltipRendererParams extends CartesianTooltipRendererParams {\n}\n\nexport interface LineSeriesOptions extends SeriesOptions {\n    marker: MarkerOptions;\n    label: LineSeriesLabelOptions;\n    tooltip: TooltipOptions<LineTooltipRendererParams>;\n    lineDash: number[];\n    lineDashOffset: number;\n}\n\nexport interface LineSeriesLabelOptions extends SeriesLabelOptions {\n    formatter?: (params: { value: any }) => string;\n}\n\nexport interface MarkerOptions {\n    enabled: boolean;\n    shape: MarkerShape;\n    size: number;\n    strokeWidth: number;\n    formatter?: Function;\n}\n\nexport interface LineTooltipRendererParams extends CartesianTooltipRendererParams {\n}\n\nexport interface ScatterSeriesLabelOptions extends SeriesLabelOptions {\n}\n\nexport interface ScatterSeriesOptions extends SeriesOptions {\n    marker: ScatterMarkerOptions;\n    label: ScatterSeriesLabelOptions;\n    tooltip: TooltipOptions<ScatterTooltipRendererParams>;\n    paired: boolean;\n}\n\nexport interface ScatterMarkerOptions extends MarkerOptions {\n    maxSize?: number;\n}\n\nexport interface ScatterTooltipRendererParams extends CartesianTooltipRendererParams {\n    sizeKey?: string;\n    sizeName?: string;\n\n    labelKey?: string;\n    labelName?: string;\n}\n\nexport interface AreaSeriesLabelOptions extends SeriesLabelOptions {\n    formatter?: (params: { value: any }) => string;\n}\n\nexport interface AreaSeriesOptions extends SeriesOptions {\n    marker: MarkerOptions;\n    label: AreaSeriesLabelOptions;\n    shadow: DropShadowOptions;\n    tooltip: TooltipOptions<AreaTooltipRendererParams>;\n    lineDash: number[];\n    lineDashOffset: number;\n}\n\nexport interface AreaTooltipRendererParams extends CartesianTooltipRendererParams {\n}\n\nexport interface PieTitleOptions extends CaptionOptions {\n    showInLegend?: boolean;\n}\n\nexport interface PieSeriesOptions extends SeriesOptions {\n    title: PieTitleOptions;\n    label: PieSeriesLabelOptions;\n    callout: PieSeriesCalloutOptions;\n    shadow: DropShadowOptions;\n    tooltip: TooltipOptions<PieTooltipRendererParams>;\n    lineDash: number[];\n    lineDashOffset: number;\n}\n\nexport interface PieSeriesLabelOptions extends SeriesLabelOptions {\n    minAngle: number;\n    offset: number;\n}\n\nexport interface PieSeriesCalloutOptions {\n    length: number;\n    strokeWidth: number;\n    colors: string[];\n}\n\nexport interface PieTooltipRendererParams extends TooltipRendererParams {\n    angleKey: string;\n    angleValue: any;\n    angleName?: string;\n\n    labelKey?: string;\n    labelName?: string;\n}\n"]}